#!/usr/bin/env ruby

$:.unshift('lib')

require 'eventmachine'
require 'mc_proxy'

$server_handler = nil
$client_handler = nil

class MessageLogger
  
  def log_message(packet)
    if !(packet.class == McProxy::Packets::Base)
      puts packet.to_s
#      puts ""
#      puts "---------------------------"
#      puts ""
    end
  end
  
end

$log = MessageLogger.new

class MessageQueue
  def initialize()
    @from_server = []
    @from_client = []
  end

  def from_server(data)
    @from_server.concat(data.bytes.to_a)
    $client_handler.send_data(data)
    self.process!
  end
  
  def from_client(data)
    @from_client.concat(data.bytes.to_a)
    $server_handler.send_data(data)
    self.process!
  end

  def process!
    log_proc = lambda { |packet|
      $log.log_message(packet)
    }

    @from_server = McProxy::Packets.each_packet(@from_server, 'client', &log_proc)
    @from_client = McProxy::Packets.each_packet(@from_client, 'server', &log_proc)
  end

end

$queue = MessageQueue.new()

module ServerHandler
  def post_init
    $server_handler = self
  end
  
  def receive_data( data )
#    printf "S "
    $queue.from_server(data)
  end

  # def unbind
  #   # puts "-- someone disconnected from the echo server!"
  # end
end

module ClientHandler
 def post_init
   $client_handler = self
   EventMachine::connect('184.72.32.36', 25565, ServerHandler)
 end

 def receive_data( data )
#   printf "C "
   $queue.from_client(data)
 end

 def unbind
   puts "-- someone disconnected from the echo server!"
   $server_handler.close_connection
 end
end

#25565, '184.72.32.36

puts "Listening for clients..."

EventMachine::run {
  EventMachine::start_server "127.0.0.1", 25565, ClientHandler
}

